{"version":3,"file":"static/webpack/static/development/pages/scoreboard.js.ec8ff46e0b7a85a89695.hot-update.js","sources":["webpack:///./components/dashboard/scoreboard/laptab.jsx"],"sourcesContent":["import React from 'react';\nimport { Table, Pagination, Segment, TableRow, Tab, Header, Menu, Icon } from 'semantic-ui-react';\nimport styled from 'styled-components';\nimport { width } from 'dom-helpers';\n\nconst TableHeader = styled(Table.HeaderCell)`\n  background: rgba(80, 87, 99, 0.05) !important;\n  border-radius: 0 !important;\n  color: black !important;\n`;\n\nconst TableCell = styled(Table.Cell)`\n  border-top: ${(props) => props.border} !important;\n  border-bottom: ${(props) => props.border} !important;\n`;\n\nconst Info = styled.p`\n  text-align: left;\n  margin-top: 1rem;\n  margin-left: 1rem;\n`;\n\nconst GenerateMyRow = ({ team }) => {\n  const color = '#00000066';\n  const border = `3px solid ${color}`;\n  console.log(\"____my team:\", team)\n   return (    \n     <Table.Row warning>\n         <Table.Cell textAlign=\"center\" style={{ marginLeft: '3rem !important' }}>\n           {team.total_score}\n         </Table.Cell>\n\n         {team.scores.map((score) => {\n           return (\n             <TableCell textAlign=\"center\">\n               {score}\n             </TableCell>\n           );\n         })}\n\n         <Table.Cell textAlign=\"center\" border={border}>{team.name}</Table.Cell>\n         <Table.Cell textAlign=\"center\" border={border}>\n           {team.rank}\n         </Table.Cell>\n       </Table.Row>\n   );\n}\n\n// const GenerateMyRow = ({ name, score, rank, display }) => {\n//   const color = '#00000066';\n//   const border = `3px solid ${color}`;\n//   return (\n//     <Table.Row warning>\n//       <Table.Cell textAlign=\"center\" style={{ marginLeft: '3rem !important' }}>\n//         {team.total_score}\n//       </Table.Cell>\n\n//       {team.scores.map((score) => {\n//         return <TableCell textAlign=\"center\">{score}</TableCell>;\n//       })}\n\n//       <Table.Cell textAlign=\"center\" border={border}>\n//         {team.name}\n//       </Table.Cell>\n//       <Table.Cell textAlign=\"center\" border={border}>\n//         {team.rank}\n//       </Table.Cell>\n\n//     </Table.Row>\n//   );\n// };\n\nconst GenerateRows = ({ data, myName, teams }) => {\n  const rows = teams.map((x) => {\n    let scoresSum = 0;\n    x.scores.map((score) => {\n      scoresSum = scoresSum + score\n    })\n\n\n    let background = '#f8f8fa';\n    const rank = x.rank;\n    if (rank <= 3) background = '#fed76673';\n    else if (rank <= 6) background = '#bbbbbb73';\n    else if (rank <= 9) background = '#cd7f3273';\n    const borderRight = `3px solid ${background} !important`;\n    if (x.name === myName) return <GenerateMyRow name={x.name} score=\"10\" rank={x.rank} />;\n\n    return (\n      <Table.Row style={{ background }}>\n        <Table.Cell textAlign=\"right\" style={{ marginLeft: '3rem !important' }}>\n          {scoresSum}\n        </Table.Cell>\n\n        {x.scores.map((score) => {\n\n          return <TableCell textAlign=\"center\">{score}</TableCell>;\n\n        })}\n\n        <Table.Cell textAlign=\"center\">{x.name}</Table.Cell>\n        <Table.Cell textAlign=\"center\" style={{ borderRight }}>\n          {x.rank}\n        </Table.Cell>\n      </Table.Row>\n    );\n  });\n  return rows;\n};\n\n\n\nconst onChange = (e, pageInfo) => {\n  console.log(\"event:\", e)\n  console.log(\"oageInfo:\", pageInfo)\n  console.log(\"active page:\", pageInfo.activePage)\n}\n\nconst Footer = (props) => {\n  const numberOfTeams = props.teams.length;\n  const pageNumbers = numberOfTeams / 2;\n\n  return (\n    <>\n      <Info>رتبه‌های 1 الی 2</Info>\n\n      <Table.Row>\n        <Table.Row>\n          <Pagination\n            defaultActivePage={1}\n            firstItem={null}\n            lastItem={null}\n            secondary\n            defaultActivePage={pageNumbers / 2}\n            totalPages={pageNumbers}\n            style={{ marginTop: '0.5rem' }}\n            onPageChange={onChange}\n          />\n        </Table.Row>\n      </Table.Row>\n    </>\n  );\n};\n\nconst Scoreboard = ({ data, milestone, teams, tasks }) => {\n\n  const myName = 'team1';\n  // const display = teams.some((x) => x.name === myName) ? 'none' : '';\n\n  return (\n    <>\n      {/* <Table selectable size=\"small\" style={{ border: '0 !important' }}>\n        <Table.Header>\n          <Table.Row style={{ height: '4rem !important' }}>\n            <TableHeader textAlign=\"right\">امتیاز</TableHeader>\n            {tasks.map((x) => {\n              return <TableHeader textAlign=\"center\">{x.name}</TableHeader>;\n            })}\n            <TableHeader textAlign=\"center\">نام</TableHeader>\n            <TableHeader textAlign=\"center\">رتبه</TableHeader>\n          </Table.Row>\n        </Table.Header>\n      </Table>\n      <Table>\n        <Table.Body>\n          <GenerateMyRow name={myName} score=\"100\" rank=\"0\" display={display} />\n          <GenerateRows data={data} myName={myName} teams={teams} />\n        </Table.Body>\n      </Table>\n      <Footer /> */}\n\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell textAlign=\"center\">امتیاز</Table.HeaderCell>\n            {tasks.map((x) => {\n              return <Table.HeaderCell textAlign=\"center\">{x.name}</Table.HeaderCell>;\n            })}\n            <Table.HeaderCell textAlign=\"center\">نام</Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\">رتبه</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          <GenerateMyRow name={myName} score=\"100\" rank=\"0\" />\n          <GenerateRows data={data} myName={myName} teams={teams} />\n        </Table.Body>\n      </Table>\n{/* <<<<<<< HEAD\n      <Footer teams={teams} /> */}\n\n      <Footer />\n\n    </>\n  );\n};\n\nexport default Scoreboard;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAPA;AAAA;AAAA;AAcA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}