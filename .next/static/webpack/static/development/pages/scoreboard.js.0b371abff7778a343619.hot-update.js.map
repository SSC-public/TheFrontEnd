{"version":3,"file":"static/webpack/static/development/pages/scoreboard.js.0b371abff7778a343619.hot-update.js","sources":["webpack:///./components/dashboard/scoreboard/laptab.jsx"],"sourcesContent":["import React from 'react';\nimport { Table, Pagination, Segment, TableRow, Tab } from 'semantic-ui-react';\nimport styled from 'styled-components';\n\nconst TableHeader = styled(Table.HeaderCell)`\n  background: rgba(80, 87, 99, 0.05) !important;\n  border-radius: 0 !important;\n  color: black !important;\n`;\n\nconst TableCell = styled(Table.Cell)`\n  border-top: ${(props) => props.border} !important;\n  border-bottom: ${(props) => props.border} !important;\n`;\n\nconst Info = styled.p`\n  text-align: left;\n  margin-top: 1rem;\n  margin-left: 1rem;\n`;\n\nconst GenerateMyRow = ({ name, score, rank, display }) => {\n  const color = '#00000066';\n  const border = `1px solid ${color}`;\n  return (\n    <Table.Row style={{ display }}>\n      <TableCell textAlign=\"right\" border={border}>\n        {score}\n      </TableCell>\n      <TableCell border={border}>{name}</TableCell>\n      <TableCell border={border} textAlign=\"center\">\n        {rank}\n      </TableCell>\n    </Table.Row>\n  );\n};\n\nconst GenerateRows = ({ data, myName, teams }) => {\n  const rows = teams.map((x) => {\n    let background = '#f8f8fa';\n    const rank = x.rank;\n    if (rank <= 3) background = '#fed76673';\n    else if (rank <= 6) background = '#bbbbbb73';\n    else if (rank <= 9) background = '#cd7f3273';\n    const borderRight = `3px solid ${background} !important`;\n    if (x.name === myName) return <GenerateMyRow name={x.name} score='10' rank={x.rank} />;\n\n    return (\n      <Table.Row style={{ background }}>\n        <Table.Cell textAlign=\"right\" style={{ marginLeft: '3rem !important' }}>\n          points\n        </Table.Cell>\n\n        {x.scores.map((score) => {\n          <TableCell textAlign='center'>\n              {score}\n          </TableCell>\n        })}\n\n        <Table.Cell textAlign='center'>{x.first}</Table.Cell>\n        <Table.Cell textAlign=\"center\" style={{ borderRight }}>\n          {x.third}\n        </Table.Cell>\n      </Table.Row>\n    );\n  });\n  return rows;\n};\n\nconst Footer = () => (\n  <>\n    <Info>رتبه‌های 1 الی 20</Info>\n    <Table.Row>\n      <Table.Row>\n        <Pagination\n          defaultActivePage={1}\n          firstItem={null}\n          lastItem={null}\n          secondary\n          totalPages={10}\n          style={{ marginTop: '0.5rem' }}\n        />\n      </Table.Row>\n    </Table.Row>\n  </>\n);\n\nconst Scoreboard = ({ data, milestone, teams, tasks }) => {\n  const myName = 'پویا معینی';\n  const display = data.some((x) => x.first === myName) ? 'none' : '';\n  return (\n    <>\n      <Table selectable size=\"small\" style={{ border: '0 !important' }}>\n        <Table.Header>\n          <Table.Row style={{ height: '4rem !important' }}>\n            <TableHeader textAlign=\"right\">امتیاز</TableHeader>\n            {tasks.map((x) => {\n              return <TableHeader textAlign=\"center\">{x.name}</TableHeader>;\n            })}\n            <TableHeader textAlign=\"center\">نام</TableHeader>\n            <TableHeader textAlign=\"center\">رتبه</TableHeader>\n          </Table.Row>\n        </Table.Header>\n        \n        \n      </Table>\n      <Table>\n      <Table.Body>\n        <GenerateMyRow name={myName} score='100' rank='0' display={display} />\n        <GenerateRows data={data} myName={myName} teams={teams}/>\n      </Table.Body>\n      </Table>\n      <Footer />\n      \n    </>\n  );\n};\n\nexport default Scoreboard;\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}