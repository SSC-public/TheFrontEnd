{"version":3,"file":"static/webpack/static/development/pages/dashboard/profile.js.f4b661b2afe3fe2e006a.hot-update.js","sources":["webpack:///./components/dashboard/profile/form.jsx","webpack:///./components/dashboard/profile/utils.js"],"sourcesContent":["/* eslint-disable camelcase */\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { Grid, Form as F, Message, Button } from 'semantic-ui-react';\nimport Input from './input';\nimport Date from './date';\nimport {fields} from './utils';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit() {\n    const { update } = this.props;\n    const new_fields = {\n      //   username: this.username.state.value,\n      //   email: this.email.state.value,\n      password_1: this.password_1.state.value,\n      password_2: this.password_2.state.value,\n      profile: {\n        firstname_fa: this.firstname_fa.state.value,\n        firstname_en: this.firstname_en.state.value,\n        lastname_fa: this.lastname_fa.state.value,\n        lastname_en: this.lastname_en.state.value,\n        university: this.university.state.value,\n        birth_date: _.join(_.reverse(_.split(this.birth_date.state.value, '-')), '-'),\n      },\n    };\n    update(new_fields);\n  }\n\n  render() {\n    const { success, errors } = this.props.profile;\n    return (\n      <Grid>\n        <Grid.Column verticalAlign=\"middle\">\n          <F onSubmit={this.onSubmit} dir=\"RTL\">\n            {_.map(fields, (field) => {\n                <Input field={field}></Input>\n            })}\n            <Message hidden={!success} positive>\n              تغییرات با موفقیت ذخیره شد.\n            </Message>\n            <Form.Button primary content=\"ذخیره‌ی تغییرات\" floated=\"right\" size=\"large\" />\n          </F>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default Form;\n","import _ from 'lodash';\nimport validator from 'validator';\n\nconst fields = [\n  // {\n  //   en: 'username',\n  //   fa: 'نام کاربری',\n  //   readOnly: true,\n  // },\n  {\n    en: 'firstname_fa',\n    fa: 'نام به فارسی',\n    readOnly: false,\n  },\n  {\n    en: 'lastname_fa',\n    fa: 'نام خانوادگی به فارسی',\n    readOnly: false,\n  },\n  {\n    en: 'firstname_en',\n    fa: 'نام به انگلیسی',\n    readOnly: false,\n  },\n  {\n    en: 'lastname_en',\n    fa: 'نام خانوادگی به انگلیسی',\n    readOnly: false,\n  },\n  // {\n  //   en: 'email',\n  //   fa: 'ایمیل',\n  //   readOnly: true,\n  // },\n  {\n    en: 'birth_date',\n    fa: 'تاریخ تولد',\n    readOnly: false,\n    date: true,\n  },\n  {\n    en: 'university',\n    fa: 'دانشگاه',\n    readOnly: false,\n  },\n  // {\n  //   en: 'education',\n  //   fa: 'تحصیلات',\n  //   readOnly: true,\n  // },\n  // {\n  //   en: 'residence',\n  //   fa: 'محل اقامت',\n  //   readOnly: true,\n  // },\n  // {\n  //   en: 'calling_number',\n  //   fa: 'تلفن همراه',\n  //   readOnly: true,\n  // },\n  {\n    en: 'password_1',\n    fa: 'رمز عبور',\n    readOnly: false,\n    pass: true,\n  },\n  {\n    en: 'password_2',\n    fa: 'تکرار رمز عبور',\n    readOnly: false,\n    pass: true,\n  },\n];\n\nfunction check(fields) {\n  const res = {};\n  const errors = {\n    firstname_fa: false,\n    lastname_fa: false,\n    firstname_en: false,\n    lastname_en: false,\n    username: false,\n    email: false,\n    birth_date: false,\n    university: false,\n    password_1: false,\n    password_2: false,\n  };\n\n  _.forEach(fields, (value, key) => {\n    if ((value === undefined || value === '') && key !== 'password_1' && key != 'password_2') {\n      errors[key] = true;\n      res.problem = 'incompleteFields';\n    }\n  });\n\n  // if (!validator.isEmail(fields.email)) {\n  //   res.problem = 'invalidEmail';\n  //   errors.email = true;\n  //   res.errors = errors;\n  //   return res;\n  // }\n\n  if (fields.password_1 !== fields.password_2) {\n    res.problem = 'passwordsNotSame';\n    errors.password_2 = true;\n  }\n  res.errors = errors;\n  return res;\n}\n\nfunction reverseBirthDate(birth_date) {\n  if (birth_date === undefined) {\n    return birth_date;\n  }\n  let parts = birth_date.split('-');\n  parts.reverse();\n  let newbirth_date = parts[0] + '-' + parts[1] + '-' + parts[2];\n\n  return newbirth_date;\n}\nexport { fields, reverseBirthDate, check };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;;;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AALA;AAcA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AA1CA;AACA;AA4CA;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;;;A","sourceRoot":""}