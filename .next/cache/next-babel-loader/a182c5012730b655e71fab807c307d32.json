{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport axios from 'axios';\nimport { profileAPI } from \"../../../redux/api/dashboard\";\nimport { refreshAPI } from \"../../../redux/api/auth\";\nimport { reverseBirthDate } from './utils';\nexport async function profileUpdate(fields, token) {\n  const {\n    firstname_fa,\n    firstname_en,\n    lastname_fa,\n    lastname_en,\n    birth_date,\n    university\n  } = fields;\n  const data = {\n    firstname_fa,\n    firstname_en,\n    lastname_fa,\n    lastname_en,\n    birth_date,\n    university\n  };\n  data.birth_date = reverseBirthDate(data.birth_date);\n\n  if (fields['password_1'].length !== 0) {\n    data.password_1 = fields.password_1;\n    data.password_2 = fields.password_2;\n  }\n\n  token = await getToken(token);\n  await axios.put(profileAPI(), data, {\n    headers: {\n      Authorization: `Bearer ${token ? token.access : token}`\n    }\n  }).then(res => {\n    console.log(res);\n    return true;\n  }).catch(err => {\n    console.log(err);\n    return false;\n  });\n}\nexport async function getToken(token) {\n  const initialRes = await fetch(profileAPI(), {\n    headers: {\n      Authorization: `Bearer ${token.access}`\n    }\n  });\n  const initialResJson = await initialRes.json();\n\n  if (initialResJson.status_code !== 200) {\n    const newAccess = await fetch(refreshAPI(), {\n      method: 'post',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: _JSON$stringify({\n        refresh: token.refresh\n      })\n    });\n    const newAccessJson = await newAccess.json();\n    token = {\n      refresh: token.refresh,\n      access: newAccessJson.access\n    };\n  }\n\n  return token;\n}","map":{"version":3,"sources":["/Users/Saba/Desktop/Front2/TheFrontEnd/components/dashboard/profile/api.jsx"],"names":["axios","profileAPI","refreshAPI","reverseBirthDate","profileUpdate","fields","token","firstname_fa","firstname_en","lastname_fa","lastname_en","birth_date","university","data","length","password_1","password_2","getToken","put","headers","Authorization","access","then","res","console","log","catch","err","initialRes","fetch","initialResJson","json","status_code","newAccess","method","body","refresh","newAccessJson"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,gBAAT,QAAiC,SAAjC;AAEA,OAAO,eAAeC,aAAf,CAA6BC,MAA7B,EAAqCC,KAArC,EAA4C;AACjD,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,YAAhB;AAA8BC,IAAAA,WAA9B;AAA2CC,IAAAA,WAA3C;AAAwDC,IAAAA,UAAxD;AAAoEC,IAAAA;AAApE,MAAmFP,MAAzF;AACA,QAAMQ,IAAI,GAAG;AACXN,IAAAA,YADW;AAEXC,IAAAA,YAFW;AAGXC,IAAAA,WAHW;AAIXC,IAAAA,WAJW;AAKXC,IAAAA,UALW;AAMXC,IAAAA;AANW,GAAb;AAQAC,EAAAA,IAAI,CAACF,UAAL,GAAkBR,gBAAgB,CAACU,IAAI,CAACF,UAAN,CAAlC;;AACA,MAAIN,MAAM,CAAC,YAAD,CAAN,CAAqBS,MAArB,KAAgC,CAApC,EAAuC;AACrCD,IAAAA,IAAI,CAACE,UAAL,GAAkBV,MAAM,CAACU,UAAzB;AACAF,IAAAA,IAAI,CAACG,UAAL,GAAkBX,MAAM,CAACW,UAAzB;AACD;;AAEDV,EAAAA,KAAK,GAAG,MAAMW,QAAQ,CAACX,KAAD,CAAtB;AACA,QAAMN,KAAK,CACRkB,GADG,CACCjB,UAAU,EADX,EACeY,IADf,EACqB;AACvBM,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASd,KAAK,GAAGA,KAAK,CAACe,MAAT,GAAkBf,KAAM;AAD/C;AADc,GADrB,EAMHgB,IANG,CAMGC,GAAD,IAAS;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAO,IAAP;AACD,GATG,EAUHG,KAVG,CAUIC,GAAD,IAAS;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACA,WAAO,KAAP;AACD,GAbG,CAAN;AAcD;AAED,OAAO,eAAeV,QAAf,CAAwBX,KAAxB,EAA+B;AACpC,QAAMsB,UAAU,GAAG,MAAMC,KAAK,CAAC5B,UAAU,EAAX,EAAe;AAC3CkB,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASd,KAAK,CAACe,MAAO;AAD/B;AADkC,GAAf,CAA9B;AAMA,QAAMS,cAAc,GAAG,MAAMF,UAAU,CAACG,IAAX,EAA7B;;AACA,MAAID,cAAc,CAACE,WAAf,KAA+B,GAAnC,EAAwC;AACtC,UAAMC,SAAS,GAAG,MAAMJ,KAAK,CAAC3B,UAAU,EAAX,EAAe;AAC1CgC,MAAAA,MAAM,EAAE,MADkC;AAE1Cf,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFiC;AAG1CgB,MAAAA,IAAI,EAAE,gBAAe;AACnBC,QAAAA,OAAO,EAAE9B,KAAK,CAAC8B;AADI,OAAf;AAHoC,KAAf,CAA7B;AAOA,UAAMC,aAAa,GAAG,MAAMJ,SAAS,CAACF,IAAV,EAA5B;AACAzB,IAAAA,KAAK,GAAG;AACN8B,MAAAA,OAAO,EAAE9B,KAAK,CAAC8B,OADT;AAENf,MAAAA,MAAM,EAAEgB,aAAa,CAAChB;AAFhB,KAAR;AAID;;AACD,SAAOf,KAAP;AACD","sourcesContent":["import axios from 'axios';\nimport { profileAPI } from '~/redux/api/dashboard';\nimport { refreshAPI } from '~/redux/api/auth';\nimport { reverseBirthDate } from './utils';\n\nexport async function profileUpdate(fields, token) {\n  const { firstname_fa, firstname_en, lastname_fa, lastname_en, birth_date, university } = fields;\n  const data = {\n    firstname_fa,\n    firstname_en,\n    lastname_fa,\n    lastname_en,\n    birth_date,\n    university,\n  };\n  data.birth_date = reverseBirthDate(data.birth_date)\n  if (fields['password_1'].length !== 0) {\n    data.password_1 = fields.password_1;\n    data.password_2 = fields.password_2;\n  }\n\n  token = await getToken(token);\n  await axios\n    .put(profileAPI(), data, {\n      headers: {\n        Authorization: `Bearer ${token ? token.access : token}`,\n      },\n    })\n    .then((res) => {\n      console.log(res);\n      return true;\n    })\n    .catch((err) => {\n      console.log(err);\n      return false;\n    });\n}\n\nexport async function getToken(token) {\n  const initialRes = await fetch(profileAPI(), {\n    headers: {\n      Authorization: `Bearer ${token.access}`,\n    },\n  });\n\n  const initialResJson = await initialRes.json();\n  if (initialResJson.status_code !== 200) {\n    const newAccess = await fetch(refreshAPI(), {\n      method: 'post',\n      headers: { 'content-type': 'application/json' },\n      body: JSON.stringify({\n        refresh: token.refresh,\n      }),\n    });\n    const newAccessJson = await newAccess.json();\n    token = {\n      refresh: token.refresh,\n      access: newAccessJson.access,\n    };\n  }\n  return token;\n}\n"]},"metadata":{},"sourceType":"module"}