{"ast":null,"code":"export default function neuralnet(canvas) {\n  let w = canvas.width = 3 * window.innerWidth / 5;\n  let h = canvas.height = window.innerHeight;\n  const ctx = canvas.getContext('2d');\n  const opts = {\n    range: 180,\n    baseConnections: 3,\n    addedConnections: 5,\n    baseSize: 5,\n    minSize: 1,\n    dataToConnectionSize: 0.4,\n    sizeMultiplier: 0.7,\n    allowedDist: 40,\n    baseDist: 40,\n    addedDist: 30,\n    connectionAttempts: 60,\n    dataToConnections: 1,\n    baseSpeed: 0.04,\n    addedSpeed: 0.05,\n    baseGlowSpeed: 0.4,\n    addedGlowSpeed: 0.4,\n    rotVelX: 0.003,\n    rotVelY: 0.002,\n    repaintColor: '#202020',\n    connectionColor: 'hsla(200,60%,light%,alp)',\n    rootColor: 'hsla(0,60%,light%,alp)',\n    endColor: 'hsla(160,20%,light%,alp)',\n    dataColor: 'hsla(40,80%,light%,alp)',\n    wireframeWidth: 0.1,\n    wireframeColor: '#88f',\n    depth: 250,\n    focalLength: 250,\n    vanishPoint: {\n      x: w / 2,\n      y: h / 2\n    }\n  };\n  const squareRange = opts.range * opts.range;\n  const squareAllowed = opts.allowedDist * opts.allowedDist;\n  const mostDistant = opts.depth + opts.range;\n  let sinX = 0;\n  let sinY = 0;\n  let cosX = 0;\n  let cosY = 0;\n  const connections = [];\n  const toDevelop = [];\n  const data = [];\n  const all = [];\n  let tick = 0;\n  let animating = false;\n  const Tau = Math.PI * 2;\n  ctx.fillStyle = '#222';\n  ctx.fillRect(0, 0, w, h);\n  ctx.fillStyle = '#ccc';\n  ctx.font = '50px Verdana';\n  ctx.fillText('Calculating Nodes', w / 2 - ctx.measureText('Calculating Nodes').width / 2, h / 2 - 15);\n  window.setTimeout(init, 4); // to render the loading screen\n\n  function init() {\n    connections.length = 0;\n    data.length = 0;\n    all.length = 0;\n    toDevelop.length = 0;\n    var connection = new Connection(0, 0, 0, opts.baseSize);\n    connection.step = Connection.rootStep;\n    connections.push(connection);\n    all.push(connection);\n    connection.link();\n\n    while (toDevelop.length > 0) {\n      toDevelop[0].link();\n      toDevelop.shift();\n    }\n\n    if (!animating) {\n      animating = true;\n      anim();\n    }\n  }\n\n  function Connection(x, y, z, size) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.size = size;\n    this.screen = {};\n    this.links = [];\n    this.probabilities = [];\n    this.isEnd = false;\n    this.glowSpeed = opts.baseGlowSpeed + opts.addedGlowSpeed * Math.random();\n  }\n\n  Connection.prototype.link = function () {\n    if (this.size < opts.minSize) return this.isEnd = true;\n    var links = [],\n        connectionsNum = opts.baseConnections + Math.random() * opts.addedConnections | 0,\n        attempt = opts.connectionAttempts,\n        alpha,\n        beta,\n        len,\n        cosA,\n        sinA,\n        cosB,\n        sinB,\n        pos = {},\n        passedExisting,\n        passedBuffered;\n\n    while (links.length < connectionsNum && --attempt > 0) {\n      alpha = Math.random() * Math.PI;\n      beta = Math.random() * Tau;\n      len = opts.baseDist + opts.addedDist * Math.random();\n      cosA = Math.cos(alpha);\n      sinA = Math.sin(alpha);\n      cosB = Math.cos(beta);\n      sinB = Math.sin(beta);\n      pos.x = this.x + len * cosA * sinB;\n      pos.y = this.y + len * sinA * sinB;\n      pos.z = this.z + len * cosB;\n\n      if (pos.x * pos.x + pos.y * pos.y + pos.z * pos.z < squareRange) {\n        passedExisting = true;\n        passedBuffered = true;\n\n        for (var i = 0; i < connections.length; ++i) if (squareDist(pos, connections[i]) < squareAllowed) passedExisting = false;\n\n        if (passedExisting) for (var i = 0; i < links.length; ++i) if (squareDist(pos, links[i]) < squareAllowed) passedBuffered = false;\n        if (passedExisting && passedBuffered) links.push({\n          x: pos.x,\n          y: pos.y,\n          z: pos.z\n        });\n      }\n    }\n\n    if (links.length === 0) this.isEnd = true;else {\n      for (var i = 0; i < links.length; ++i) {\n        var pos = links[i],\n            connection = new Connection(pos.x, pos.y, pos.z, this.size * opts.sizeMultiplier);\n        this.links[i] = connection;\n        all.push(connection);\n        connections.push(connection);\n      }\n\n      for (var i = 0; i < this.links.length; ++i) toDevelop.push(this.links[i]);\n    }\n  };\n\n  Connection.prototype.step = function () {\n    this.setScreen();\n    this.screen.color = (this.isEnd ? opts.endColor : opts.connectionColor).replace('light', 30 + tick * this.glowSpeed % 30).replace('alp', 0.2 + (1 - this.screen.z / mostDistant) * 0.8);\n\n    for (var i = 0; i < this.links.length; ++i) {\n      ctx.moveTo(this.screen.x, this.screen.y);\n      ctx.lineTo(this.links[i].screen.x, this.links[i].screen.y);\n    }\n  };\n\n  Connection.rootStep = function () {\n    this.setScreen();\n    this.screen.color = opts.rootColor.replace('light', 30 + tick * this.glowSpeed % 30).replace('alp', (1 - this.screen.z / mostDistant) * 0.8);\n\n    for (var i = 0; i < this.links.length; ++i) {\n      ctx.moveTo(this.screen.x, this.screen.y);\n      ctx.lineTo(this.links[i].screen.x, this.links[i].screen.y);\n    }\n  };\n\n  Connection.prototype.draw = function () {\n    ctx.fillStyle = this.screen.color;\n    ctx.beginPath();\n    ctx.arc(this.screen.x, this.screen.y, this.screen.scale * this.size, 0, Tau);\n    ctx.fill();\n  };\n\n  function Data(connection) {\n    this.glowSpeed = opts.baseGlowSpeed + opts.addedGlowSpeed * Math.random();\n    this.speed = opts.baseSpeed + opts.addedSpeed * Math.random();\n    this.screen = {};\n    this.setConnection(connection);\n  }\n\n  Data.prototype.reset = function () {\n    this.setConnection(connections[0]);\n    this.ended = 2;\n  };\n\n  Data.prototype.step = function () {\n    this.proportion += this.speed;\n\n    if (this.proportion < 1) {\n      this.x = this.ox + this.dx * this.proportion;\n      this.y = this.oy + this.dy * this.proportion;\n      this.z = this.oz + this.dz * this.proportion;\n      this.size = (this.os + this.ds * this.proportion) * opts.dataToConnectionSize;\n    } else this.setConnection(this.nextConnection);\n\n    this.screen.lastX = this.screen.x;\n    this.screen.lastY = this.screen.y;\n    this.setScreen();\n    this.screen.color = opts.dataColor.replace('light', 40 + tick * this.glowSpeed % 50).replace('alp', 0.2 + (1 - this.screen.z / mostDistant) * 0.6);\n  };\n\n  Data.prototype.draw = function () {\n    if (this.ended) return --this.ended; // not sre why the thing lasts 2 frames, but it does\n\n    ctx.beginPath();\n    ctx.strokeStyle = this.screen.color;\n    ctx.lineWidth = this.size * this.screen.scale;\n    ctx.moveTo(this.screen.lastX, this.screen.lastY);\n    ctx.lineTo(this.screen.x, this.screen.y);\n    ctx.stroke();\n  };\n\n  Data.prototype.setConnection = function (connection) {\n    if (connection.isEnd) this.reset();else {\n      this.connection = connection;\n      this.nextConnection = connection.links[connection.links.length * Math.random() | 0];\n      this.ox = connection.x; // original coordinates\n\n      this.oy = connection.y;\n      this.oz = connection.z;\n      this.os = connection.size; // base size\n\n      this.nx = this.nextConnection.x; // new\n\n      this.ny = this.nextConnection.y;\n      this.nz = this.nextConnection.z;\n      this.ns = this.nextConnection.size;\n      this.dx = this.nx - this.ox; // delta\n\n      this.dy = this.ny - this.oy;\n      this.dz = this.nz - this.oz;\n      this.ds = this.ns - this.os;\n      this.proportion = 0;\n    }\n  };\n\n  Connection.prototype.setScreen = Data.prototype.setScreen = function () {\n    var x = this.x,\n        y = this.y,\n        z = this.z; // apply rotation on X axis\n\n    var Y = y;\n    y = y * cosX - z * sinX;\n    z = z * cosX + Y * sinX; // rot on Y\n\n    var Z = z;\n    z = z * cosY - x * sinY;\n    x = x * cosY + Z * sinY;\n    this.screen.z = z; // translate on Z\n\n    z += opts.depth;\n    this.screen.scale = opts.focalLength / z;\n    this.screen.x = opts.vanishPoint.x + x * this.screen.scale;\n    this.screen.y = opts.vanishPoint.y + y * this.screen.scale;\n  };\n\n  function squareDist(a, b) {\n    var x = b.x - a.x,\n        y = b.y - a.y,\n        z = b.z - a.z;\n    return x * x + y * y + z * z;\n  }\n\n  function anim() {\n    window.requestAnimationFrame(anim);\n    ctx.globalCompositeOperation = 'source-over';\n    ctx.fillStyle = opts.repaintColor;\n    ctx.fillRect(0, 0, w, h);\n    ++tick;\n    var rotX = tick * opts.rotVelX,\n        rotY = tick * opts.rotVelY;\n    cosX = Math.cos(rotX);\n    sinX = Math.sin(rotX);\n    cosY = Math.cos(rotY);\n    sinY = Math.sin(rotY);\n\n    if (data.length < connections.length * opts.dataToConnections) {\n      var datum = new Data(connections[0]);\n      data.push(datum);\n      all.push(datum);\n    }\n\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.beginPath();\n    ctx.lineWidth = opts.wireframeWidth;\n    ctx.strokeStyle = opts.wireframeColor;\n    all.map(function (item) {\n      item.step();\n    });\n    ctx.stroke();\n    ctx.globalCompositeOperation = 'source-over';\n    all.sort(function (a, b) {\n      return b.screen.z - a.screen.z;\n    });\n    all.map(function (item) {\n      item.draw();\n    });\n  }\n\n  window.addEventListener('resize', function () {\n    opts.vanishPoint.x = (w = canvas.width = 4 * window.innerWidth / 5) / 2;\n    opts.vanishPoint.y = (h = canvas.height = window.innerHeight) / 2;\n    ctx.fillRect(0, 0, w, h);\n  }); //   window.addEventListener('click', init);\n}","map":{"version":3,"sources":["/Users/parsa/Desktop/everything/projects/ongoing/DataDays/TheFrontEnd/components/user/network.js"],"names":["neuralnet","canvas","w","width","window","innerWidth","h","height","innerHeight","ctx","getContext","opts","range","baseConnections","addedConnections","baseSize","minSize","dataToConnectionSize","sizeMultiplier","allowedDist","baseDist","addedDist","connectionAttempts","dataToConnections","baseSpeed","addedSpeed","baseGlowSpeed","addedGlowSpeed","rotVelX","rotVelY","repaintColor","connectionColor","rootColor","endColor","dataColor","wireframeWidth","wireframeColor","depth","focalLength","vanishPoint","x","y","squareRange","squareAllowed","mostDistant","sinX","sinY","cosX","cosY","connections","toDevelop","data","all","tick","animating","Tau","Math","PI","fillStyle","fillRect","font","fillText","measureText","setTimeout","init","length","connection","Connection","step","rootStep","push","link","shift","anim","z","size","screen","links","probabilities","isEnd","glowSpeed","random","prototype","connectionsNum","attempt","alpha","beta","len","cosA","sinA","cosB","sinB","pos","passedExisting","passedBuffered","cos","sin","i","squareDist","setScreen","color","replace","moveTo","lineTo","draw","beginPath","arc","scale","fill","Data","speed","setConnection","reset","ended","proportion","ox","dx","oy","dy","oz","dz","os","ds","nextConnection","lastX","lastY","strokeStyle","lineWidth","stroke","nx","ny","nz","ns","Y","Z","a","b","requestAnimationFrame","globalCompositeOperation","rotX","rotY","datum","map","item","sort","addEventListener"],"mappings":"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","sourcesContent":["export default function neuralnet(canvas) {\n  let w = (canvas.width = (3 * window.innerWidth) / 5);\n  let h = (canvas.height = window.innerHeight);\n  const ctx = canvas.getContext('2d');\n  const opts = {\n    range: 180,\n    baseConnections: 3,\n    addedConnections: 5,\n    baseSize: 5,\n    minSize: 1,\n    dataToConnectionSize: 0.4,\n    sizeMultiplier: 0.7,\n    allowedDist: 40,\n    baseDist: 40,\n    addedDist: 30,\n    connectionAttempts: 60,\n\n    dataToConnections: 1,\n    baseSpeed: 0.04,\n    addedSpeed: 0.05,\n    baseGlowSpeed: 0.4,\n    addedGlowSpeed: 0.4,\n\n    rotVelX: 0.003,\n    rotVelY: 0.002,\n\n    repaintColor: '#202020',\n    connectionColor: 'hsla(200,60%,light%,alp)',\n    rootColor: 'hsla(0,60%,light%,alp)',\n    endColor: 'hsla(160,20%,light%,alp)',\n    dataColor: 'hsla(40,80%,light%,alp)',\n\n    wireframeWidth: 0.1,\n    wireframeColor: '#88f',\n\n    depth: 250,\n    focalLength: 250,\n    vanishPoint: {\n      x: w / 2,\n      y: h / 2,\n    },\n  };\n  const squareRange = opts.range * opts.range;\n  const squareAllowed = opts.allowedDist * opts.allowedDist;\n  const mostDistant = opts.depth + opts.range;\n  let sinX = 0;\n  let sinY = 0;\n  let cosX = 0;\n  let cosY = 0;\n  const connections = [];\n  const toDevelop = [];\n  const data = [];\n  const all = [];\n  let tick = 0;\n  let animating = false;\n  const Tau = Math.PI * 2;\n\n  ctx.fillStyle = '#222';\n  ctx.fillRect(0, 0, w, h);\n  ctx.fillStyle = '#ccc';\n  ctx.font = '50px Verdana';\n  ctx.fillText(\n    'Calculating Nodes',\n    w / 2 - ctx.measureText('Calculating Nodes').width / 2,\n    h / 2 - 15,\n  );\n\n  window.setTimeout(init, 4); // to render the loading screen\n\n  function init() {\n    connections.length = 0;\n    data.length = 0;\n    all.length = 0;\n    toDevelop.length = 0;\n\n    var connection = new Connection(0, 0, 0, opts.baseSize);\n    connection.step = Connection.rootStep;\n    connections.push(connection);\n    all.push(connection);\n    connection.link();\n\n    while (toDevelop.length > 0) {\n      toDevelop[0].link();\n      toDevelop.shift();\n    }\n\n    if (!animating) {\n      animating = true;\n      anim();\n    }\n  }\n  function Connection(x, y, z, size) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.size = size;\n\n    this.screen = {};\n\n    this.links = [];\n    this.probabilities = [];\n    this.isEnd = false;\n\n    this.glowSpeed = opts.baseGlowSpeed + opts.addedGlowSpeed * Math.random();\n  }\n  Connection.prototype.link = function() {\n    if (this.size < opts.minSize) return (this.isEnd = true);\n\n    var links = [],\n      connectionsNum = (opts.baseConnections + Math.random() * opts.addedConnections) | 0,\n      attempt = opts.connectionAttempts,\n      alpha,\n      beta,\n      len,\n      cosA,\n      sinA,\n      cosB,\n      sinB,\n      pos = {},\n      passedExisting,\n      passedBuffered;\n\n    while (links.length < connectionsNum && --attempt > 0) {\n      alpha = Math.random() * Math.PI;\n      beta = Math.random() * Tau;\n      len = opts.baseDist + opts.addedDist * Math.random();\n\n      cosA = Math.cos(alpha);\n      sinA = Math.sin(alpha);\n      cosB = Math.cos(beta);\n      sinB = Math.sin(beta);\n\n      pos.x = this.x + len * cosA * sinB;\n      pos.y = this.y + len * sinA * sinB;\n      pos.z = this.z + len * cosB;\n\n      if (pos.x * pos.x + pos.y * pos.y + pos.z * pos.z < squareRange) {\n        passedExisting = true;\n        passedBuffered = true;\n        for (var i = 0; i < connections.length; ++i)\n          if (squareDist(pos, connections[i]) < squareAllowed) passedExisting = false;\n\n        if (passedExisting)\n          for (var i = 0; i < links.length; ++i)\n            if (squareDist(pos, links[i]) < squareAllowed) passedBuffered = false;\n\n        if (passedExisting && passedBuffered) links.push({ x: pos.x, y: pos.y, z: pos.z });\n      }\n    }\n\n    if (links.length === 0) this.isEnd = true;\n    else {\n      for (var i = 0; i < links.length; ++i) {\n        var pos = links[i],\n          connection = new Connection(pos.x, pos.y, pos.z, this.size * opts.sizeMultiplier);\n\n        this.links[i] = connection;\n        all.push(connection);\n        connections.push(connection);\n      }\n      for (var i = 0; i < this.links.length; ++i) toDevelop.push(this.links[i]);\n    }\n  };\n  Connection.prototype.step = function() {\n    this.setScreen();\n    this.screen.color = (this.isEnd ? opts.endColor : opts.connectionColor)\n      .replace('light', 30 + ((tick * this.glowSpeed) % 30))\n      .replace('alp', 0.2 + (1 - this.screen.z / mostDistant) * 0.8);\n\n    for (var i = 0; i < this.links.length; ++i) {\n      ctx.moveTo(this.screen.x, this.screen.y);\n      ctx.lineTo(this.links[i].screen.x, this.links[i].screen.y);\n    }\n  };\n  Connection.rootStep = function() {\n    this.setScreen();\n    this.screen.color = opts.rootColor\n      .replace('light', 30 + ((tick * this.glowSpeed) % 30))\n      .replace('alp', (1 - this.screen.z / mostDistant) * 0.8);\n\n    for (var i = 0; i < this.links.length; ++i) {\n      ctx.moveTo(this.screen.x, this.screen.y);\n      ctx.lineTo(this.links[i].screen.x, this.links[i].screen.y);\n    }\n  };\n  Connection.prototype.draw = function() {\n    ctx.fillStyle = this.screen.color;\n    ctx.beginPath();\n    ctx.arc(this.screen.x, this.screen.y, this.screen.scale * this.size, 0, Tau);\n    ctx.fill();\n  };\n  function Data(connection) {\n    this.glowSpeed = opts.baseGlowSpeed + opts.addedGlowSpeed * Math.random();\n    this.speed = opts.baseSpeed + opts.addedSpeed * Math.random();\n\n    this.screen = {};\n\n    this.setConnection(connection);\n  }\n  Data.prototype.reset = function() {\n    this.setConnection(connections[0]);\n    this.ended = 2;\n  };\n  Data.prototype.step = function() {\n    this.proportion += this.speed;\n\n    if (this.proportion < 1) {\n      this.x = this.ox + this.dx * this.proportion;\n      this.y = this.oy + this.dy * this.proportion;\n      this.z = this.oz + this.dz * this.proportion;\n      this.size = (this.os + this.ds * this.proportion) * opts.dataToConnectionSize;\n    } else this.setConnection(this.nextConnection);\n\n    this.screen.lastX = this.screen.x;\n    this.screen.lastY = this.screen.y;\n    this.setScreen();\n    this.screen.color = opts.dataColor\n      .replace('light', 40 + ((tick * this.glowSpeed) % 50))\n      .replace('alp', 0.2 + (1 - this.screen.z / mostDistant) * 0.6);\n  };\n  Data.prototype.draw = function() {\n    if (this.ended) return --this.ended; // not sre why the thing lasts 2 frames, but it does\n\n    ctx.beginPath();\n    ctx.strokeStyle = this.screen.color;\n    ctx.lineWidth = this.size * this.screen.scale;\n    ctx.moveTo(this.screen.lastX, this.screen.lastY);\n    ctx.lineTo(this.screen.x, this.screen.y);\n    ctx.stroke();\n  };\n  Data.prototype.setConnection = function(connection) {\n    if (connection.isEnd) this.reset();\n    else {\n      this.connection = connection;\n      this.nextConnection = connection.links[(connection.links.length * Math.random()) | 0];\n\n      this.ox = connection.x; // original coordinates\n      this.oy = connection.y;\n      this.oz = connection.z;\n      this.os = connection.size; // base size\n\n      this.nx = this.nextConnection.x; // new\n      this.ny = this.nextConnection.y;\n      this.nz = this.nextConnection.z;\n      this.ns = this.nextConnection.size;\n\n      this.dx = this.nx - this.ox; // delta\n      this.dy = this.ny - this.oy;\n      this.dz = this.nz - this.oz;\n      this.ds = this.ns - this.os;\n\n      this.proportion = 0;\n    }\n  };\n  Connection.prototype.setScreen = Data.prototype.setScreen = function() {\n    var x = this.x,\n      y = this.y,\n      z = this.z;\n\n    // apply rotation on X axis\n    var Y = y;\n    y = y * cosX - z * sinX;\n    z = z * cosX + Y * sinX;\n\n    // rot on Y\n    var Z = z;\n    z = z * cosY - x * sinY;\n    x = x * cosY + Z * sinY;\n\n    this.screen.z = z;\n\n    // translate on Z\n    z += opts.depth;\n\n    this.screen.scale = opts.focalLength / z;\n    this.screen.x = opts.vanishPoint.x + x * this.screen.scale;\n    this.screen.y = opts.vanishPoint.y + y * this.screen.scale;\n  };\n  function squareDist(a, b) {\n    var x = b.x - a.x,\n      y = b.y - a.y,\n      z = b.z - a.z;\n\n    return x * x + y * y + z * z;\n  }\n\n  function anim() {\n    window.requestAnimationFrame(anim);\n\n    ctx.globalCompositeOperation = 'source-over';\n    ctx.fillStyle = opts.repaintColor;\n    ctx.fillRect(0, 0, w, h);\n\n    ++tick;\n\n    var rotX = tick * opts.rotVelX,\n      rotY = tick * opts.rotVelY;\n\n    cosX = Math.cos(rotX);\n    sinX = Math.sin(rotX);\n    cosY = Math.cos(rotY);\n    sinY = Math.sin(rotY);\n\n    if (data.length < connections.length * opts.dataToConnections) {\n      var datum = new Data(connections[0]);\n      data.push(datum);\n      all.push(datum);\n    }\n\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.beginPath();\n    ctx.lineWidth = opts.wireframeWidth;\n    ctx.strokeStyle = opts.wireframeColor;\n    all.map(function(item) {\n      item.step();\n    });\n    ctx.stroke();\n    ctx.globalCompositeOperation = 'source-over';\n    all.sort(function(a, b) {\n      return b.screen.z - a.screen.z;\n    });\n    all.map(function(item) {\n      item.draw();\n    });\n  }\n\n  window.addEventListener('resize', function() {\n    opts.vanishPoint.x = (w = canvas.width = (4 * window.innerWidth) / 5) / 2;\n    opts.vanishPoint.y = (h = canvas.height = window.innerHeight) / 2;\n    ctx.fillRect(0, 0, w, h);\n  });\n  //   window.addEventListener('click', init);\n}\n"]},"metadata":{},"sourceType":"module"}