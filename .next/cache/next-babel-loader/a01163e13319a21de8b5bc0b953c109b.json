{"ast":null,"code":"var _jsxFileName = \"/Users/bahar/Desktop/TheFrontEnd/components/dashboard/scoreboard/laptab.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Table, Pagination, Segment, TableRow, Tab } from 'semantic-ui-react';\nimport styled from 'styled-components';\nconst TableHeader = styled(Table.HeaderCell).withConfig({\n  displayName: \"laptab__TableHeader\",\n  componentId: \"qvtjrt-0\"\n})([\"background:rgba(80,87,99,0.05) !important;border-radius:0 !important;color:black !important;\"]);\nconst TableCell = styled(Table.Cell).withConfig({\n  displayName: \"laptab__TableCell\",\n  componentId: \"qvtjrt-1\"\n})([\"border-top:\", \" !important;border-bottom:\", \" !important;\"], props => props.border, props => props.border);\nconst Info = styled.p.withConfig({\n  displayName: \"laptab__Info\",\n  componentId: \"qvtjrt-2\"\n})([\"text-align:left;margin-top:1rem;margin-left:1rem;\"]);\n\nconst GenerateMyRow = ({\n  name,\n  score,\n  rank,\n  display\n}) => {\n  const color = '#00000066';\n  const border = `1px solid ${color}`;\n  return __jsx(Table.Row, {\n    style: {\n      display\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    textAlign: \"right\",\n    border: border,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, score), __jsx(TableCell, {\n    border: border,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, name), __jsx(TableCell, {\n    border: border,\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, rank));\n};\n\nconst GenerateRows = ({\n  data,\n  myName,\n  teams\n}) => {\n  const rows = teams.map(x => {\n    let background = '#f8f8fa';\n    const rank = x.rank;\n    if (rank <= 3) background = '#fed76673';else if (rank <= 6) background = '#bbbbbb73';else if (rank <= 9) background = '#cd7f3273';\n    const borderRight = `3px solid ${background} !important`;\n    if (x.name === myName) return __jsx(GenerateMyRow, {\n      name: x.name,\n      score: \"10\",\n      rank: x.rank,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n    return __jsx(Table.Row, {\n      style: {\n        background\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, __jsx(Table.Cell, {\n      textAlign: \"right\",\n      style: {\n        marginLeft: '3rem !important'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"points\"), x.scores.map(score => {\n      __jsx(TableCell, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, score);\n    }), __jsx(Table.Cell, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, x.name), __jsx(Table.Cell, {\n      textAlign: \"center\",\n      style: {\n        borderRight\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, x.rank));\n  });\n  return rows;\n};\n\nconst Footer = () => __jsx(React.Fragment, null, __jsx(Info, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72\n  },\n  __self: this\n}, \"\\u0631\\u062A\\u0628\\u0647\\u200C\\u0647\\u0627\\u06CC 1 \\u0627\\u0644\\u06CC 20\"), __jsx(Table.Row, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73\n  },\n  __self: this\n}, __jsx(Table.Row, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 74\n  },\n  __self: this\n}, __jsx(Pagination, {\n  defaultActivePage: 1,\n  firstItem: null,\n  lastItem: null,\n  secondary: true,\n  totalPages: 10,\n  style: {\n    marginTop: '0.5rem'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75\n  },\n  __self: this\n}))));\n\nconst Scoreboard = ({\n  data,\n  milestone,\n  teams,\n  tasks\n}) => {\n  const myName = 'پویا معینی';\n  const display = data.some(x => x.first === myName) ? 'none' : '';\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    selectable: true,\n    size: \"small\",\n    style: {\n      border: '0 !important'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, __jsx(Table.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, __jsx(Table.Row, {\n    style: {\n      height: '4rem !important'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, __jsx(TableHeader, {\n    textAlign: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"\\u0627\\u0645\\u062A\\u06CC\\u0627\\u0632\"), tasks.map(x => {\n    return __jsx(TableHeader, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, x.name);\n  }), __jsx(TableHeader, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"\\u0646\\u0627\\u0645\"), __jsx(TableHeader, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"\\u0631\\u062A\\u0628\\u0647\")))), __jsx(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, __jsx(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, __jsx(GenerateMyRow, {\n    name: myName,\n    score: \"100\",\n    rank: \"0\",\n    display: display,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), __jsx(GenerateRows, {\n    data: data,\n    myName: myName,\n    teams: teams,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }))), __jsx(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }));\n};\n\nexport default Scoreboard;","map":{"version":3,"sources":["/Users/bahar/Desktop/TheFrontEnd/components/dashboard/scoreboard/laptab.jsx"],"names":["React","Table","Pagination","Segment","TableRow","Tab","styled","TableHeader","HeaderCell","TableCell","Cell","props","border","Info","p","GenerateMyRow","name","score","rank","display","color","GenerateRows","data","myName","teams","rows","map","x","background","borderRight","marginLeft","scores","Footer","marginTop","Scoreboard","milestone","tasks","some","first","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Table, Pagination, Segment, TableRow, Tab } from 'semantic-ui-react';\nimport styled from 'styled-components';\n\nconst TableHeader = styled(Table.HeaderCell)`\n  background: rgba(80, 87, 99, 0.05) !important;\n  border-radius: 0 !important;\n  color: black !important;\n`;\n\nconst TableCell = styled(Table.Cell)`\n  border-top: ${(props) => props.border} !important;\n  border-bottom: ${(props) => props.border} !important;\n`;\n\nconst Info = styled.p`\n  text-align: left;\n  margin-top: 1rem;\n  margin-left: 1rem;\n`;\n\nconst GenerateMyRow = ({ name, score, rank, display }) => {\n  const color = '#00000066';\n  const border = `1px solid ${color}`;\n  return (\n    <Table.Row style={{ display }}>\n      <TableCell textAlign=\"right\" border={border}>\n        {score}\n      </TableCell>\n      <TableCell border={border}>{name}</TableCell>\n      <TableCell border={border} textAlign=\"center\">\n        {rank}\n      </TableCell>\n    </Table.Row>\n  );\n};\n\nconst GenerateRows = ({ data, myName, teams }) => {\n  const rows = teams.map((x) => {\n    let background = '#f8f8fa';\n    const rank = x.rank;\n    if (rank <= 3) background = '#fed76673';\n    else if (rank <= 6) background = '#bbbbbb73';\n    else if (rank <= 9) background = '#cd7f3273';\n    const borderRight = `3px solid ${background} !important`;\n    if (x.name === myName) return <GenerateMyRow name={x.name} score='10' rank={x.rank} />;\n\n    return (\n      <Table.Row style={{ background }}>\n        <Table.Cell textAlign=\"right\" style={{ marginLeft: '3rem !important' }}>\n          points\n        </Table.Cell>\n\n        {x.scores.map((score) => {\n          <TableCell textAlign='center'>\n              {score}\n          </TableCell>\n        })}\n\n        <Table.Cell textAlign='center'>{x.name}</Table.Cell>\n        <Table.Cell textAlign=\"center\" style={{ borderRight }}>\n          {x.rank}\n        </Table.Cell>\n      </Table.Row>\n    );\n  });\n  return rows;\n};\n\nconst Footer = () => (\n  <>\n    <Info>رتبه‌های 1 الی 20</Info>\n    <Table.Row>\n      <Table.Row>\n        <Pagination\n          defaultActivePage={1}\n          firstItem={null}\n          lastItem={null}\n          secondary\n          totalPages={10}\n          style={{ marginTop: '0.5rem' }}\n        />\n      </Table.Row>\n    </Table.Row>\n  </>\n);\n\nconst Scoreboard = ({ data, milestone, teams, tasks }) => {\n  const myName = 'پویا معینی';\n  const display = data.some((x) => x.first === myName) ? 'none' : '';\n  return (\n    <>\n      <Table selectable size=\"small\" style={{ border: '0 !important' }}>\n        <Table.Header>\n          <Table.Row style={{ height: '4rem !important' }}>\n            <TableHeader textAlign=\"right\">امتیاز</TableHeader>\n            {tasks.map((x) => {\n              return <TableHeader textAlign=\"center\">{x.name}</TableHeader>;\n            })}\n            <TableHeader textAlign=\"center\">نام</TableHeader>\n            <TableHeader textAlign=\"center\">رتبه</TableHeader>\n          </Table.Row>\n        </Table.Header>\n        \n        \n      </Table>\n      <Table>\n      <Table.Body>\n        <GenerateMyRow name={myName} score='100' rank='0' display={display} />\n        <GenerateRows data={data} myName={myName} teams={teams}/>\n      </Table.Body>\n      </Table>\n      <Footer />\n      \n    </>\n  );\n};\n\nexport default Scoreboard;\n"]},"metadata":{},"sourceType":"module"}