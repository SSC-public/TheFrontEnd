{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Table, Image, Header, List, Divider } from 'semantic-ui-react';\nimport htmlParser from 'react-markdown/plugins/html-parser';\nexport default htmlParser({\n  isValidNode: node => true,\n  processingInstructions: [{\n    shouldProcessNode(node) {\n      return node.name && node.name === 'div';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"div\", {\n        style: {\n          marginBottom: '1rem'\n        },\n        dir: \"RTL\"\n      }, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'font';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"font\", _extends({}, node.attribs, {\n        style: {\n          lineHeight: 1.5\n        },\n        face: \"IRANSans\",\n        size: \"5\"\n      }), children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'h1';\n    },\n\n    processNode(node) {\n      return __jsx(Header, {\n        as: \"h1\",\n        style: {\n          fontSize: '3rem',\n          lineHeight: 1.5,\n          marginBottom: '3rem',\n          direction: 'rtl'\n        }\n      }, node.children[0].data);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'h2';\n    },\n\n    processNode(node) {\n      return __jsx(Header, {\n        as: \"h2\",\n        style: {\n          fontSize: '2.25rem',\n          lineHeight: 1.5,\n          marginBottom: '3rem',\n          direction: 'rtl'\n        }\n      }, node.children[0].data);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'h3';\n    },\n\n    processNode(node) {\n      return __jsx(Header, {\n        as: \"h3\",\n        style: {\n          fontSize: '2rem',\n          lineHeight: 1.5,\n          marginBottom: '1rem'\n        }\n      }, node.children[0].data);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'h4';\n    },\n\n    processNode(node) {\n      return __jsx(Header, {\n        as: \"h4\",\n        style: {\n          fontSize: '1.75rem',\n          lineHeight: 1.5,\n          marginBottom: '1rem'\n        }\n      }, node.children[0].data);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'figure';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"figure\", {\n        style: {\n          textAlign: 'center'\n        }\n      }, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'figcaption';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"figcaption\", {\n        style: {\n          textAlign: 'center'\n        }\n      }, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'img';\n    },\n\n    processNode(node) {\n      return __jsx(Image, {\n        style: {\n          margin: '3rem auto'\n        },\n        src: node.attribs.src\n      });\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'table';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"div\", {\n        style: {\n          marginBottom: '3rem',\n          width: '100%',\n          overflowX: 'scroll'\n        }\n      }, __jsx(Table, {\n        celled: true,\n        striped: true,\n        stackable: false\n      }, children));\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'thead';\n    },\n\n    processNode(node, children) {\n      return __jsx(Table.Header, null, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'tbody';\n    },\n\n    processNode(node, children) {\n      return __jsx(Table.Body, null, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'tr';\n    },\n\n    processNode(node, children) {\n      return __jsx(Table.Row, null, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'th';\n    },\n\n    processNode(node, children) {\n      return __jsx(Table.HeaderCell, null, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'td';\n    },\n\n    processNode(node, children) {\n      return __jsx(Table.Cell, null, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'ul';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"div\", {\n        style: {\n          margin: '2rem'\n        },\n        dir: \"RTL\"\n      }, __jsx(List, {\n        bulleted: true\n      }, children));\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'ol';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"div\", {\n        style: {\n          margin: '2rem'\n        },\n        dir: \"RTL\"\n      }, __jsx(List, {\n        ordered: true\n      }, children));\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'li';\n    },\n\n    processNode(node, children) {\n      return __jsx(List.Item, null, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'hr';\n    },\n\n    processNode(node, children) {\n      return __jsx(Divider, null);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'br';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"br\", null);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'code';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"code\", {\n        style: {\n          backgroundColor: '#eeeeee',\n          direction: 'ltr'\n        }\n      }, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'p';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"span\", {\n        style: {\n          fontSize: '1.5rem',\n          lineHeight: 1.5,\n          marginBottom: '0.75rem',\n          direction: 'rtl'\n        }\n      }, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'a';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"a\", {\n        href: node.attribs.href,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\"\n      }, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'blockquote';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"blockquote\", {\n        style: {\n          color: 'grey',\n          borderRight: '5px solid #e0e1e2',\n          paddingRight: '2rem'\n        }\n      }, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'strong';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"strong\", null, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.name && node.name === 'em';\n    },\n\n    processNode(node, children) {\n      return __jsx(\"em\", null, children);\n    }\n\n  }, {\n    shouldProcessNode(node) {\n      return node.type && node.type === 'text';\n    },\n\n    processNode(node) {\n      if (!node.parent || node.parent.tagName === 'div' || node.parent.tagName === 'font') {\n        return __jsx(\"span\", {\n          style: {\n            fontSize: '1.5rem',\n            lineHeight: 1.5,\n            marginBottom: '0.75rem',\n            direction: 'rtl'\n          }\n        }, node.nodeValue);\n      }\n\n      return __jsx(React.Fragment, null, node.nodeValue);\n    }\n\n  }]\n});","map":null,"metadata":{},"sourceType":"module"}