{"ast":null,"code":"import _ from 'lodash';\nimport { loginAPI, authAPI } from '../api/auth';\nexport var LOGIN_CLEAR = 'LOGIN_CLEAR';\nexport var LOGIN_LOAD = 'LOGIN_LOAD';\nexport var LOGIN_UNLOAD = 'LOGIN_UNLOAD';\nexport var LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport var LOGIN_FAIL = 'LOGIN_FAIL';\nexport var LOGIN_CHECK = 'LOGIN_CHECK';\nexport var SET_AUTH = 'SET_AUTH';\nexport var LOGOUT = 'LOGOUT';\n\nfunction loginClearAction() {\n  return {\n    type: LOGIN_CLEAR\n  };\n}\n\nfunction loginLoadAction() {\n  return {\n    type: LOGIN_LOAD\n  };\n}\n\nexport function loginUnloadAction() {\n  return {\n    type: LOGIN_UNLOAD\n  };\n}\n\nfunction loginSuccessAction(token) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: {\n      token: token\n    }\n  };\n}\n\nfunction loginFailAction(errors) {\n  return {\n    type: LOGIN_FAIL,\n    payload: {\n      errors: errors\n    }\n  };\n}\n\nexport function loginCheckerAction(fields) {\n  return {\n    type: LOGIN_CHECK,\n    payload: {\n      fields: fields\n    }\n  };\n}\nexport function loginAction(username, password) {\n  return function (dispatch, getState) {\n    dispatch(loginClearAction());\n    dispatch(loginLoadAction());\n    dispatch(loginCheckerAction({\n      username: username,\n      password: password\n    }));\n\n    if (_.isEmpty(getState().auth.errors)) {\n      loginAPI({\n        username: username,\n        password: password\n      }).then(function (res) {\n        var data = res.data;\n\n        if (data.status_code === 200) {\n          dispatch(loginSuccessAction(data.access));\n        } else {\n          dispatch(loginFailAction(data.detail));\n        }\n      });\n    } else {\n      dispatch(loginUnloadAction());\n    }\n  };\n}\n\nfunction setAuthAction(auth) {\n  return {\n    type: SET_AUTH,\n    payload: {\n      auth: auth\n    }\n  };\n}\n\nexport function authorizeAction(token) {\n  return function (dispatch) {\n    return authAPI(token).then(function (res) {\n      if (res.data.status_code !== 200) {\n        dispatch(setAuthAction(false));\n        return false;\n      }\n\n      dispatch(setAuthAction(true));\n      return true;\n    });\n  };\n}\nexport function logoutAction() {\n  return {\n    type: LOGOUT\n  };\n}","map":{"version":3,"sources":["/Users/parsa/Desktop/everything/projects/ongoing/DataDays/TheFrontEnd/redux/actions/auth.js"],"names":["_","loginAPI","authAPI","LOGIN_CLEAR","LOGIN_LOAD","LOGIN_UNLOAD","LOGIN_SUCCESS","LOGIN_FAIL","LOGIN_CHECK","SET_AUTH","LOGOUT","loginClearAction","type","loginLoadAction","loginUnloadAction","loginSuccessAction","token","payload","loginFailAction","errors","loginCheckerAction","fields","loginAction","username","password","dispatch","getState","isEmpty","auth","then","res","data","status_code","access","detail","setAuthAction","authorizeAction","logoutAction"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { loginAPI, authAPI } from '../api/auth';\n\nexport const LOGIN_CLEAR = 'LOGIN_CLEAR';\nexport const LOGIN_LOAD = 'LOGIN_LOAD';\nexport const LOGIN_UNLOAD = 'LOGIN_UNLOAD';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const LOGIN_CHECK = 'LOGIN_CHECK';\n\nexport const SET_AUTH = 'SET_AUTH';\n\nexport const LOGOUT = 'LOGOUT';\n\nfunction loginClearAction() {\n  return {\n    type: LOGIN_CLEAR,\n  };\n}\n\nfunction loginLoadAction() {\n  return {\n    type: LOGIN_LOAD,\n  };\n}\n\nexport function loginUnloadAction() {\n  return {\n    type: LOGIN_UNLOAD,\n  };\n}\n\nfunction loginSuccessAction(token) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: {\n      token,\n    },\n  };\n}\n\nfunction loginFailAction(errors) {\n  return {\n    type: LOGIN_FAIL,\n    payload: {\n      errors,\n    },\n  };\n}\n\nexport function loginCheckerAction(fields) {\n  return {\n    type: LOGIN_CHECK,\n    payload: {\n      fields,\n    },\n  };\n}\n\nexport function loginAction(username, password) {\n  return (dispatch, getState) => {\n    dispatch(loginClearAction());\n    dispatch(loginLoadAction());\n    dispatch(loginCheckerAction({ username, password }));\n    if (_.isEmpty(getState().auth.errors)) {\n      loginAPI({ username, password }).then((res) => {\n        const { data } = res;\n        if (data.status_code === 200) {\n          dispatch(loginSuccessAction(data.access));\n        } else {\n          dispatch(loginFailAction(data.detail));\n        }\n      });\n    } else {\n      dispatch(loginUnloadAction());\n    }\n  };\n}\n\nfunction setAuthAction(auth) {\n  return {\n    type: SET_AUTH,\n    payload: {\n      auth,\n    },\n  };\n}\n\nexport function authorizeAction(token) {\n  return (dispatch) => {\n    return authAPI(token).then((res) => {\n      if (res.data.status_code !== 200) {\n        dispatch(setAuthAction(false));\n        return false;\n      }\n      dispatch(setAuthAction(true));\n      return true;\n    });\n  };\n}\n\nexport function logoutAction() {\n  return {\n    type: LOGOUT,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}