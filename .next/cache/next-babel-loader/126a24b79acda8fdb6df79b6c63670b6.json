{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { profileAPI } from \"../../../redux/api/dashboard\";\nimport { refreshAPI } from \"../../../redux/api/auth\";\nimport { reverseBirthDate } from './utils';\nexport function profileUpdate(_x, _x2) {\n  return _profileUpdate.apply(this, arguments);\n}\n\nfunction _profileUpdate() {\n  _profileUpdate = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(fields, token) {\n    var firstname_fa, firstname_en, lastname_fa, lastname_en, birth_date, university, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            firstname_fa = fields.firstname_fa, firstname_en = fields.firstname_en, lastname_fa = fields.lastname_fa, lastname_en = fields.lastname_en, birth_date = fields.birth_date, university = fields.university;\n            data = {\n              firstname_fa: firstname_fa,\n              firstname_en: firstname_en,\n              lastname_fa: lastname_fa,\n              lastname_en: lastname_en,\n              birth_date: birth_date,\n              university: university\n            };\n            data.birth_date = reverseBirthDate(data.birth_date);\n\n            if (fields['password_1'].length !== 0) {\n              data.password_1 = fields.password_1;\n              data.password_2 = fields.password_2;\n            }\n\n            _context.next = 6;\n            return getToken(token);\n\n          case 6:\n            token = _context.sent;\n            _context.next = 9;\n            return axios.put(profileAPI(), data, {\n              headers: {\n                Authorization: \"Bearer \".concat(token ? token.access : token)\n              }\n            }).then(function (res) {\n              console.log(res);\n              return true;\n            })[\"catch\"](function (err) {\n              console.log(err);\n              return false;\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _profileUpdate.apply(this, arguments);\n}\n\nexport function getToken(_x3) {\n  return _getToken.apply(this, arguments);\n}\n\nfunction _getToken() {\n  _getToken = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(token) {\n    var initialRes, initialResJson, newAccess, newAccessJson;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(profileAPI(), {\n              headers: {\n                Authorization: \"Bearer \".concat(token.access)\n              }\n            });\n\n          case 2:\n            initialRes = _context2.sent;\n            _context2.next = 5;\n            return initialRes.json();\n\n          case 5:\n            initialResJson = _context2.sent;\n\n            if (!(initialResJson.status_code !== 200)) {\n              _context2.next = 14;\n              break;\n            }\n\n            _context2.next = 9;\n            return fetch(refreshAPI(), {\n              method: 'post',\n              headers: {\n                'content-type': 'application/json'\n              },\n              body: _JSON$stringify({\n                refresh: token.refresh\n              })\n            });\n\n          case 9:\n            newAccess = _context2.sent;\n            _context2.next = 12;\n            return newAccess.json();\n\n          case 12:\n            newAccessJson = _context2.sent;\n            token = {\n              refresh: token.refresh,\n              access: newAccessJson.access\n            };\n\n          case 14:\n            return _context2.abrupt(\"return\", token);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getToken.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/Saba/Desktop/Front2/TheFrontEnd/components/dashboard/profile/api.jsx"],"names":["axios","profileAPI","refreshAPI","reverseBirthDate","profileUpdate","fields","token","firstname_fa","firstname_en","lastname_fa","lastname_en","birth_date","university","data","length","password_1","password_2","getToken","put","headers","Authorization","access","then","res","console","log","err","fetch","initialRes","json","initialResJson","status_code","method","body","refresh","newAccess","newAccessJson"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { profileAPI } from '~/redux/api/dashboard';\nimport { refreshAPI } from '~/redux/api/auth';\nimport { reverseBirthDate } from './utils';\n\nexport async function profileUpdate(fields, token) {\n  const { firstname_fa, firstname_en, lastname_fa, lastname_en, birth_date, university } = fields;\n  const data = {\n    firstname_fa,\n    firstname_en,\n    lastname_fa,\n    lastname_en,\n    birth_date,\n    university,\n  };\n  data.birth_date = reverseBirthDate(data.birth_date)\n  if (fields['password_1'].length !== 0) {\n    data.password_1 = fields.password_1;\n    data.password_2 = fields.password_2;\n  }\n\n  token = await getToken(token);\n  await axios\n    .put(profileAPI(), data, {\n      headers: {\n        Authorization: `Bearer ${token ? token.access : token}`,\n      },\n    })\n    .then((res) => {\n      console.log(res);\n      return true;\n    })\n    .catch((err) => {\n      console.log(err);\n      return false;\n    });\n}\n\nexport async function getToken(token) {\n  const initialRes = await fetch(profileAPI(), {\n    headers: {\n      Authorization: `Bearer ${token.access}`,\n    },\n  });\n\n  const initialResJson = await initialRes.json();\n  if (initialResJson.status_code !== 200) {\n    const newAccess = await fetch(refreshAPI(), {\n      method: 'post',\n      headers: { 'content-type': 'application/json' },\n      body: JSON.stringify({\n        refresh: token.refresh,\n      }),\n    });\n    const newAccessJson = await newAccess.json();\n    token = {\n      refresh: token.refresh,\n      access: newAccessJson.access,\n    };\n  }\n  return token;\n}\n"]},"metadata":{},"sourceType":"module"}