{"ast":null,"code":"import _ from 'lodash';\nimport { loginAPI, authAPI, refreshAPI } from '../api/auth';\nexport const LOGIN_CLEAR = 'LOGIN_CLEAR';\nexport const LOGIN_LOAD = 'LOGIN_LOAD';\nexport const LOGIN_UNLOAD = 'LOGIN_UNLOAD';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const LOGIN_CHECK = 'LOGIN_CHECK';\nexport const SET_TOKEN = 'SET_TOKEN';\nexport const LOGOUT = 'LOGOUT';\n\nfunction loginClearAction() {\n  return {\n    type: LOGIN_CLEAR\n  };\n}\n\nfunction loginLoadAction() {\n  return {\n    type: LOGIN_LOAD\n  };\n}\n\nexport function loginUnloadAction() {\n  return {\n    type: LOGIN_UNLOAD\n  };\n}\n\nfunction loginSuccessAction(token) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: {\n      token\n    }\n  };\n}\n\nfunction loginFailAction(errors) {\n  return {\n    type: LOGIN_FAIL,\n    payload: {\n      errors\n    }\n  };\n}\n\nexport function loginCheckerAction(fields) {\n  return {\n    type: LOGIN_CHECK,\n    payload: {\n      fields\n    }\n  };\n}\nexport function loginAction(username, password) {\n  return (dispatch, getState) => {\n    dispatch(loginClearAction());\n    dispatch(loginLoadAction());\n    dispatch(loginCheckerAction({\n      username,\n      password\n    }));\n\n    if (_.isEmpty(getState().auth.errors)) {\n      loginAPI({\n        username,\n        password\n      }).then(res => {\n        const {\n          data\n        } = res;\n\n        if (data.status_code === 200) {\n          const token = {\n            refresh: data.refresh,\n            access: data.access\n          };\n          dispatch(loginSuccessAction(token));\n        } else {\n          dispatch(loginFailAction(data.detail));\n        }\n      });\n    } else {\n      dispatch(loginUnloadAction());\n    }\n  };\n}\n\nfunction setTokenAction(token) {\n  return {\n    type: SET_TOKEN,\n    payload: {\n      token\n    }\n  };\n}\n\nexport function authorizeAction() {\n  return (dispatch, getState) => {\n    const {\n      token\n    } = getState().auth;\n    dispatch(loginLoadAction());\n    authAPI(token).then(authRes => {\n      if (authRes.data.status_code !== 200) {\n        refreshAPI(token).then(refreshRes => {\n          if (refreshRes.data.status_code !== 200) {\n            dispatch(setTokenAction({}));\n          } else {\n            const newToken = {\n              refresh: token.refresh,\n              access: refreshRes.data.access\n            };\n            dispatch(setTokenAction(newToken));\n          }\n        });\n      } else {\n        dispatch(setTokenAction(token));\n      }\n    });\n  };\n}\nexport function logoutAction() {\n  return {\n    type: LOGOUT\n  };\n}","map":{"version":3,"sources":["/Users/parsa/Desktop/everything/projects/ongoing/DataDays/TheFrontEnd/redux/actions/auth.js"],"names":["_","loginAPI","authAPI","refreshAPI","LOGIN_CLEAR","LOGIN_LOAD","LOGIN_UNLOAD","LOGIN_SUCCESS","LOGIN_FAIL","LOGIN_CHECK","SET_TOKEN","LOGOUT","loginClearAction","type","loginLoadAction","loginUnloadAction","loginSuccessAction","token","payload","loginFailAction","errors","loginCheckerAction","fields","loginAction","username","password","dispatch","getState","isEmpty","auth","then","res","data","status_code","refresh","access","detail","setTokenAction","authorizeAction","authRes","refreshRes","newToken","logoutAction"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { loginAPI, authAPI, refreshAPI } from '../api/auth';\n\nexport const LOGIN_CLEAR = 'LOGIN_CLEAR';\nexport const LOGIN_LOAD = 'LOGIN_LOAD';\nexport const LOGIN_UNLOAD = 'LOGIN_UNLOAD';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const LOGIN_CHECK = 'LOGIN_CHECK';\n\nexport const SET_TOKEN = 'SET_TOKEN';\n\nexport const LOGOUT = 'LOGOUT';\n\nfunction loginClearAction() {\n  return {\n    type: LOGIN_CLEAR,\n  };\n}\n\nfunction loginLoadAction() {\n  return {\n    type: LOGIN_LOAD,\n  };\n}\n\nexport function loginUnloadAction() {\n  return {\n    type: LOGIN_UNLOAD,\n  };\n}\n\nfunction loginSuccessAction(token) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: {\n      token,\n    },\n  };\n}\n\nfunction loginFailAction(errors) {\n  return {\n    type: LOGIN_FAIL,\n    payload: {\n      errors,\n    },\n  };\n}\n\nexport function loginCheckerAction(fields) {\n  return {\n    type: LOGIN_CHECK,\n    payload: {\n      fields,\n    },\n  };\n}\n\nexport function loginAction(username, password) {\n  return (dispatch, getState) => {\n    dispatch(loginClearAction());\n    dispatch(loginLoadAction());\n    dispatch(loginCheckerAction({ username, password }));\n    if (_.isEmpty(getState().auth.errors)) {\n      loginAPI({ username, password }).then((res) => {\n        const { data } = res;\n        if (data.status_code === 200) {\n          const token = {\n            refresh: data.refresh,\n            access: data.access,\n          };\n          dispatch(loginSuccessAction(token));\n        } else {\n          dispatch(loginFailAction(data.detail));\n        }\n      });\n    } else {\n      dispatch(loginUnloadAction());\n    }\n  };\n}\n\nfunction setTokenAction(token) {\n  return {\n    type: SET_TOKEN,\n    payload: {\n      token,\n    },\n  };\n}\n\nexport function authorizeAction() {\n  return (dispatch, getState) => {\n    const { token } = getState().auth;\n    dispatch(loginLoadAction());\n    authAPI(token).then((authRes) => {\n      if (authRes.data.status_code !== 200) {\n        refreshAPI(token).then((refreshRes) => {\n          if (refreshRes.data.status_code !== 200) {\n            dispatch(setTokenAction({}));\n          } else {\n            const newToken = {\n              refresh: token.refresh,\n              access: refreshRes.data.access,\n            };\n            dispatch(setTokenAction(newToken));\n          }\n        });\n      } else {\n        dispatch(setTokenAction(token));\n      }\n    });\n  };\n}\n\nexport function logoutAction() {\n  return {\n    type: LOGOUT,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}